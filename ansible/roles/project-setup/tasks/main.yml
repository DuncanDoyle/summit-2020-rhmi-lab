---
- name: Create backing project
  shell: oc new-project {{project_name}}
  register: _action_create_project
  failed_when: _action_create_project.rc != 0 and 'AlreadyExists' not in _action_create_project.stderr

- name: Create OperatorGroup
  shell: oc apply -f {{role_path}}/files/operator.group.yml -n {{project_name}}

- name: Create operator Subscription
  shell: oc apply -f {{role_path}}/files/operator.subscription.yml -n {{project_name}}

- name: Wait for a bit operator to be available
  shell: sleep 30

- name: Create AMQ Streams cluster
  shell: oc apply -f {{role_path}}/files/kafka.cluster.yml -n {{project_name}}

- name: Create AMQ Streams junction topic
  shell: oc apply -f {{role_path}}/files/kafka.topic.junctions.yml -n {{project_name}}

- name: Create AMQ Streams junction topic
  shell: oc apply -f {{role_path}}/files/kafka.topic.meters.yml -n {{project_name}}

- name: Deploy IoT data generator
  shell: oc new-app quay.io/evanshortiss/summit-2020-rhmi-lab-data-generator

- name: Create PSQL deployment
  shell: oc new-app postgresql-persistent --param=POSTGRESQL_DATABASE=city-info --param=VOLUME_CAPACITY=10Gi --param=POSTGRESQL_VERSION=9.6 --param=POSTGRESQL_USER=rh-summit-admin --param=POSTGRESQL_PASSWORD=changethistosomethingelse -n {{project_name}}

- name: Verify PSQL pods are running
  shell: oc get pods -l name=postgresql -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}' -n {{project_name}}
  register: result
  until: result.stdout == "true"
  retries: 60
  delay: 5
  changed_when: False

- name: Get PSQL Pod ID
  shell: oc get pods -l name=postgresql -o jsonpath='{.items[0].metadata.name}' -n {{project_name}}
  register: psql_pod_id

- name : Create files dir for data in PSQL Pod
  shell: oc exec {{psql_pod_id.stdout}} -- bash -c 'mkdir /var/lib/pgsql/data/setup-files' -n {{project_name}}

- name: rsync files to PSQL Pod
  shell: oc rsync {{role_path}}/files/psql-files/ {{psql_pod_id.stdout}}:/var/lib/pgsql/data/setup-files -n {{project_name}}

- name: Run PSQL setup script in Pod
  shell: oc exec {{psql_pod_id.stdout}} -- bash -c 'psql -U postgres -f /var/lib/pgsql/data/setup-files/reference-data-db-setup.sql' -n {{project_name}}

- name: Create PSQL evals users
  shell: oc exec {{psql_pod_id.stdout}} -- bash -c 'sh /var/lib/pgsql/data/setup-files/create-users-and-dbs.sh' -n {{project_name}}

- name: Update POSTGRESQL_MAX_CONNECTIONS count
  shell: oc set env dc/postgresql POSTGRESQL_MAX_CONNECTIONS=500 -n {{project_name}}
